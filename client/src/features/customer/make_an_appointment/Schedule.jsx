import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import './Schedule.scss';

// --- HELPER FUNCTION: Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng Date th√†nh chu·ªói YYYY-MM-DD ---
// S·ª≠ d·ª•ng c√°c th√†nh ph·∫ßn local c·ªßa Date ƒë·ªÉ tr√°nh l·ªói m√∫i gi·ªù
const toYYYYMMDD = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
};


function Schedule() {
    const { doctorId } = useParams();
    const navigate = useNavigate();

    const [clinicAddress, setClinicAddress] = useState('');
    const [selectedDate, setSelectedDate] = useState(new Date());
    
    // ƒê·ªïi t√™n state ƒë·ªÉ r√µ r√†ng h∆°n
    const [timeSlots, setTimeSlots] = useState([]); 
    
    const [selectedSlot, setSelectedSlot] = useState(null);
    const [symptoms, setSymptoms] = useState('');
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const fetchScheduleData = async () => {
            setIsLoading(true);
            setError('');
            setTimeSlots([]); // Reset state
            setSelectedSlot(null);

            // S·ª≠ d·ª•ng helper function ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ng√†y ch√≠nh x√°c
            const dateString = toYYYYMMDD(selectedDate);

            try {
                // G·ªçi song song 3 API
                const [doctorRes, workScheduleRes, bookedSlotsRes] = await Promise.all([
                    axios.get(`http://localhost:5000/api/patient/doctor/${doctorId}`),
                    axios.get(`http://localhost:5000/api/patient/work_schedule_doctor/${doctorId}`),
                    axios.get(`http://localhost:5000/api/patient/doctor/${doctorId}/booked-slots?date=${dateString}`)
                ]);

                setClinicAddress(doctorRes.data[0]?.address || 'ƒê·ªãa ch·ªâ ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t');

                const allWorkBlocks = workScheduleRes.data;
                // const booked = bookedSlotsRes.data;
                const booked = bookedSlotsRes.data || []; 

                // === LOGIC SO S√ÅNH NG√ÄY TH√ÅNG AN TO√ÄN NH·∫§T ===
                // So s√°nh c√°c th√†nh ph·∫ßn ng√†y, th√°ng, nƒÉm ƒë·ªÉ tr√°nh l·ªói m√∫i gi·ªù
                const workBlocksForDay = allWorkBlocks.filter(block => {
                    if (!block.date) return false;
                    // Chuy·ªÉn ng√†y t·ª´ DB (d·∫°ng UTC) v·ªÅ ƒë·ªëi t∆∞·ª£ng Date ·ªü local
                    const dbDate = new Date(block.date);
                    
                    // So s√°nh t·ª´ng th√†nh ph·∫ßn
                    return dbDate.getFullYear() === selectedDate.getFullYear() &&
                           dbDate.getMonth() === selectedDate.getMonth() &&
                           dbDate.getDate() === selectedDate.getDate();
                });

                if (workBlocksForDay.length === 0) {
                    setError("B√°c sƒ© kh√¥ng c√≥ l·ªãch l√†m vi·ªác v√†o ng√†y n√†y.");
                    setIsLoading(false);
                    return;
                }
                
                const generatedSlots = [];
                // L·∫∑p qua t·ª´ng ca l√†m vi·ªác trong ng√†y
                workBlocksForDay.forEach(block => {
                    if (block.datetime_start && block.datetime_end) {
                        const startTime = new Date(block.datetime_start);
                        const endTime = new Date(block.datetime_end);
                        let currentSlot = new Date(startTime);

                        while (currentSlot < endTime) {
                            const timeString = currentSlot.toTimeString().split(' ')[0];
                            
                            // T·∫°o m·ªôt object ch·ª©a th·ªùi gian v√† tr·∫°ng th√°i (ƒë√£ ƒë·∫∑t hay ch∆∞a)
                            generatedSlots.push({
                                time: timeString,
                                isBooked: booked.includes(timeString)
                            });
                            
                            // TƒÉng th·ªùi gian l√™n 1 gi·ªù
                            currentSlot.setHours(currentSlot.getHours() + 1);
                        }
                    }
                });
                
                setTimeSlots(generatedSlots);
                // Ki·ªÉm tra xem c√≥ khung gi·ªù n√†o c√≤n tr·ªëng kh√¥ng
                if (!generatedSlots.some(slot => !slot.isBooked)) {
                    setError("T·∫•t c·∫£ c√°c khung gi·ªù trong ng√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t.");
                }

            } catch (err) {
                console.error("L·ªói khi t·∫£i l·ªãch tr√¨nh:", err);
                setError("Kh√¥ng th·ªÉ t·∫£i l·ªãch tr√¨nh. Vui l√≤ng th·ª≠ l·∫°i.");
            } finally {
                setIsLoading(false);
            }
        };

        fetchScheduleData();
    }, [selectedDate, doctorId]);

    const handleProceedToConfirmation = () => {
        if (!selectedSlot) {
            setError("Vui l√≤ng ch·ªçn m·ªôt khung gi·ªù.");
            return;
        }
        if(!symptoms) {
            alert("Vui l√≤ng nh·∫≠p l√Ω do kham.");
            return;
        }
        const appointmentInfo = {
            doctorId,
            appointmentDate: toYYYYMMDD(selectedDate), // G·ª≠i ƒëi ng√†y ƒë√£ ƒë∆∞·ª£c format
            time: selectedSlot,
            symptoms,
            clinicAddress
        };

        navigate('/datlich/xac-nhan-thong-tin', { state: { appointmentInfo } });
    };

    return (
        <div className="schedule-card">
            <h3>Ch·ªçn Ng√†y v√† Gi·ªù Kh√°m</h3>
            <div className="address-info">
                <span className="icon" role="img" aria-label="location-pin">üìç</span>
                <span className="address-text">
                    <strong>ƒê·ªãa ƒëi·ªÉm kh√°m:</strong> {clinicAddress}
                </span>
            </div>
            <div className="date-picker-container">
                <label>Ch·ªçn ng√†y:</label>
                <input
                    type="date"
                    // S·ª¨A L·∫†I: D√πng helper function ƒë·ªÉ hi·ªÉn th·ªã ng√†y
                    value={toYYYYMMDD(selectedDate)}
                    // S·ª¨A L·∫†I: X·ª≠ l√Ω chu·ªói ng√†y ƒë·ªÉ tr√°nh l·ªói m√∫i gi·ªù
                    onChange={(e) => {
                        // T√°ch chu·ªói YYYY-MM-DD v√† t·∫°o Date object ·ªü m√∫i gi·ªù local
                        const [year, month, day] = e.target.value.split('-').map(Number);
                        setSelectedDate(new Date(year, month - 1, day));
                    }}
                    min={toYYYYMMDD(new Date())}
                />
            </div>
            <div className="time-slots-container">
                {isLoading ? <p className="loading-message">ƒêang t·∫£i l·ªãch...</p> : 
                 timeSlots.length > 0 ? (
                    timeSlots.map(slotInfo => (
                        <button
                            key={slotInfo.time}
                            className={`time-slot ${slotInfo.isBooked ? 'booked' : ''} ${selectedSlot === slotInfo.time ? 'selected' : ''}`}
                            disabled={slotInfo.isBooked}
                            onClick={() => !slotInfo.isBooked && setSelectedSlot(slotInfo.time)}
                        >
                            {slotInfo.time.substring(0, 5)}
                        </button>
                    ))
                 ) : (
                    <div className="no-slots-message">
                        <span className="icon">üóìÔ∏è</span>
                        <p>{error || "Kh√¥ng c√≥ khung gi·ªù tr·ªëng n√†o"}</p>
                        <span>Vui l√≤ng ch·ªçn m·ªôt ng√†y kh√°c ho·∫∑c ki·ªÉm tra l·∫°i sau.</span>
                    </div>
                 )
                }
            </div>
            <div className="symptoms-container">
                <label htmlFor="symptoms">M√¥ t·∫£ tri·ªáu ch·ª©ng (kh√¥ng b·∫Øt bu·ªôc):</label>
                <textarea
                    id="symptoms"
                    rows="4"
                    value={symptoms}
                    onChange={(e) => setSymptoms(e.target.value)}
                    required
                    placeholder="V√≠ d·ª•: ƒêau ƒë·∫ßu, ch√≥ng m·∫∑t..."
                ></textarea>
            </div>
            <footer className="footer-action">
                <button
                    className="confirm-button"
                    onClick={handleProceedToConfirmation}
                    disabled={!selectedSlot}
                >
                    Ti·∫øp T·ª•c
                </button>
            </footer>
        </div>
    );
}

export default Schedule;
